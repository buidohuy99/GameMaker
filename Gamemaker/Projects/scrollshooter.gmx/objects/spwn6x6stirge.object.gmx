<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spawnerstate='transition';
delay_wave=10;
timer=delay_wave*room_speed;
wave=0;
delay_spawn=0.1;
xx=0;
yy=0;
global.desired_height=0;
//boss enemy
enemy_type_boss[0]=oj_boss1;
enemy_type_boss[1]=oj_boss2;
//normal enemy
enemy_type[0]=oj_stirge; //stt=0
enemy_type[1]=oj_boogie; //stt=1
enemy_type[2]=oj_star;
enemy_type[3]=oj_lunar;
enemy_type_min=0; //bat dau spawn o quai vat mang stt nay,neu 2 so khac nhau a=min va b=max (a 0 can &lt;b)
enemy_type_max=0; //=&gt; bat dau wave 1 se spawn nhung loai quai mang so thu tu tu a den b
end_spawn_type=3; //ket thuc spawn o quai vat mang stt nay , neu muon ket thuc o quai vat cuoi cung
                    // cua array enemy_type thi nhap 'array_length(enemy_type) -1'
//wave counter before each wave
display_wave=6;
display_count=3;
//time after fight boss
delay_room=20;
start_scrolling_fast=5;
display_chucmung=14;
//soluong ke thu 
num_enemy_x =2;
num_enemy_y =2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if spawnerstate='spawn'{
if !(wave mod 10=0) {
if xx&lt;num_enemy_x {spawncomplete=false;}
type=irandom_range(enemy_type_min,enemy_type_max);
//teukbyeol-enemy appear at once spawn
var bh=sprite_get_height(object_get_sprite(enemy_type[enemy_type_min])); //lay chieu cao cua quai vat
var bw=sprite_get_width(object_get_sprite(enemy_type[enemy_type_min])); //lay chieu ngang cua quai vat
for (i=enemy_type_min; i&lt;= enemy_type_max ;i++)
{
if (sprite_get_height(object_get_sprite(enemy_type[i]))&gt;bh) &amp;&amp; (sprite_get_width(object_get_sprite(enemy_type[i]))&gt;bw) {
bh =sprite_get_height(object_get_sprite(enemy_type[i]));
bw =sprite_get_width(object_get_sprite(enemy_type[i]));
global.desired_height=sprite_get_height(object_get_sprite(enemy_type[i]))/2;
}
}
var disbetweeninx=bw/2;//khoang cach giua 2 quai vat theo x , tot nhat nen lay 1/2 chieu ngang quai
var disbetweeniny=bh/2;//khoang cach giua 2 quai vat theo y , tot nhat nen lay 1/2 chieu doc quai
var starty=view_yview[0]+136+((view_hview[0]-136)/2)-((bh*num_enemy_y+disbetweeniny*(num_enemy_y-1))/2);//view_yview[0]+200; //vi tri bat dau dat quai vat dau tien theo y
var startx=view_wview[0]-(bw*num_enemy_x+disbetweeninx*(num_enemy_x-1))-40;//view_wview[0]-400; //vi tri bat dau dat quai vat dau tien theo x
var dx=bw+disbetweeninx; //khoang cach giua quai theo chieu ngang+ chieu ngang cua quai
var dy=bh+disbetweeniny;//khoang cach giua quai theo chieu doc + chieu doc cua quai 
    if xx&gt;=num_enemy_x { spawncomplete=true;
    }
    if yy&gt;=num_enemy_y {
    yy=0;
    xx ++;
    alarm[0]=delay_spawn*room_speed;
    }
    if xx&lt;num_enemy_x{instance_create(startx+(xx*dx),starty+(yy*dy),enemy_type[type]);
    yy++;
    alarm[0]=delay_spawn*room_speed;}
if spawncomplete=true {xx=0; spawnerstate='monitor';}
}
if wave mod 10=0 {spawncomplete=false;
for (i=0;i&lt;array_length_1d(enemy_type_boss);i++){
if wave div 10=(i+1) {
instance_create(view_wview[0]+320,((view_hview[0]-136)/2)+136+view_yview[0],enemy_type_boss[i]);
spawncomplete=true;
}}
if spawncomplete=true {spawnerstate='monitor'}
}
}  

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(spawnerstate) {
//Reemerge
case 'rejoin':
for (var h=0;h&lt;array_length_1d(global.space_station);h++){
    if (room==global.space_station[h])&amp;&amp;(timer==0) {room_fadeto(room_next(room),-1,-1);
    timer=10*room_speed;
    }
    else {
    if !instance_exists(oj_maybay) {global.dialogue=false;instance_create(view_xview[0]+160,view_hview[0]/2,oj_maybay);}
    if timer&lt;=0 {spawnerstate='transition';
    timer=delay_wave*room_speed;
    }else{timer--}}
    }
;break;
//shopping
case 'shopping':
    if !instance_exists(oj_maybay){
    global.dialogue=true;
    instance_create(view_xview[0]-160,view_hview[0]/2,oj_maybay);};break;

//after fight boss
case 'wait' :
if instance_exists(oj_maybay){
if timer&lt;=0 {
if instance_exists(oj_maybay) {
spawnerstate='shopping';
for (var i=0;i&lt;array_length_1d(global.space_station);i++){
    if wave div 10 =i+1 {
    room_fadeto(global.space_station[i],-1,-1);}
    };
}
} else {timer--}
if (timer&lt;=start_scrolling_fast*room_speed){
background_hspeed =-50;
};}
break;

case 'monitor':
    enemies_remaining=false;
if (wave mod 10!=0) {
for (i=0;i&lt;array_length_1d(enemy_type);i++){
    if instance_exists(enemy_type[i]) {
    enemies_remaining=true;}}}
else {for (u=0;u&lt;array_length_1d(enemy_type_boss);u++)
    { if instance_exists(enemy_type_boss[u]) {enemies_remaining=true;}}}
if !enemies_remaining {
    if (wave mod 10 !=0) {
    timer=delay_wave*room_speed;
    spawnerstate='transition';
    }
    else { timer=delay_room*room_speed;
    spawnerstate='wait';}
}; break;
case 'transition':
if timer&lt;=0 {
wave++;
    if wave&gt;1 {
    if wave mod 5=0 {
    enemy_type_max=min(enemy_type_max +1,end_spawn_type);
    } 
    if wave mod 10=0 {
    enemy_type_min =min(enemy_type_min+2,enemy_type_max);
    }
    }
spawnerstate='spawn';
alarm[0]=delay_spawn*room_speed;
} else {timer--}
; break;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if spawnerstate='transition'{
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    if timer&lt;= display_wave*room_speed {
    draw_set_font(font_wave_noti);
    draw_text_transformed_colour(display_get_gui_width()/2 ,display_get_gui_height()/2-100,'Wave ' + string(wave+1) ,1,1,0,c_white,c_black,c_blue,c_aqua,1);
    }
    if timer&lt;= display_count*room_speed {
    draw_set_font(font_ui_style);
    draw_text_colour(display_get_gui_width()/2 ,display_get_gui_height()/2 -50 ,'Starting in ' + string(ceil(string(timer/room_speed))),c_white,c_white,c_white,c_white,1 );
    }
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_font(-1);
}
if spawnerstate='wait' {
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    if (timer&lt;= display_chucmung*room_speed) &amp;&amp; (timer&gt;(start_scrolling_fast*room_speed)+2*room_speed) {
    draw_set_font(font_wave_noti);
    draw_text_transformed_colour(display_get_gui_width()/2,display_get_gui_height()/2 -100,'System clear',1,1,0,c_white,c_black,c_aqua,c_blue,1)
    }
    if (timer&lt;= start_scrolling_fast*room_speed) {
    draw_set_font(font_ui_style);
    draw_text_transformed_colour(display_get_gui_width()/2,display_get_gui_height()/2 -100,'Space station detected ,moving in '+ string(ceil(string(timer/room_speed))),1,1,0,c_white,c_black,c_aqua,c_blue,1)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
